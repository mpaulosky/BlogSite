@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication

@inject SignInManager<PgBlogSiteUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="max-w-6xl mx-auto py-8">
	<div class="mb-8">
		<h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2">
			Log in
		</h1>
		<p class="text-gray-600 dark:text-gray-400">
			Sign in to your account to continue
		</p>
	</div>

	<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
		<div>
			<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 border border-gray-200 dark:border-gray-700">
				<StatusMessage Message="@errorMessage"/>
				<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
					<DataAnnotationsValidator/>
					<h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-2">
						Use a local account
					</h2>
					<p class="text-sm text-gray-600 dark:text-gray-400 mb-6">
						Enter your credentials to access your account
					</p>
					<ValidationSummary
						class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg p-4 mb-4"
						role="alert"/>

					<div class="mb-4">
						<label for="Input.Email"
									 class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Email
						</label>
						<InputText @bind-Value="Input.Email" id="Input.Email" aria-label="Input.Email" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                                          focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                                          placeholder-gray-400 dark:placeholder-gray-500
                                          transition-all duration-200" autocomplete="username" aria-required="true"
											 placeholder="name@example.com"/>
						<ValidationMessage For="() => Input.Email"
															 class="text-red-600 dark:text-red-400 text-sm mt-1"/>
					</div>

					<div class="mb-4">
						<label for="Input.Password"
									 class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Password
						</label>
						<InputText type="password" @bind-Value="Input.Password" id="Input.Password"
											 aria-label="Input.Password" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                                          focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                                          placeholder-gray-400 dark:placeholder-gray-500
                                          transition-all duration-200" autocomplete="current-password"
											 aria-required="true" placeholder="••••••••"/>
						<ValidationMessage For="() => Input.Password"
															 class="text-red-600 dark:text-red-400 text-sm mt-1"/>
					</div>

					<div class="mb-6">
						<label class="flex items-center gap-2 cursor-pointer">
							<InputCheckbox @bind-Value="Input.RememberMe" class="w-4 h-4 text-indigo-600 border-gray-300 dark:border-gray-600 rounded
                                                 focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400
                                                 bg-white dark:bg-gray-700"/>
							<span class="text-sm text-gray-700 dark:text-gray-300">Remember me</span>
						</label>
					</div>

					<div class="mb-6">
						<button type="submit" aria-label="loginbutton" class="w-full px-6 py-3 rounded-lg font-medium
                                       bg-gradient-to-r from-indigo-600 to-purple-600 
                                       hover:from-indigo-700 hover:to-purple-700
                                       text-white
                                       shadow-md hover:shadow-lg
                                       transform hover:scale-[1.02] active:scale-[0.98]
                                       transition-all duration-200">
							Log in
						</button>
					</div>

					<div class="space-y-2 text-sm border-t border-gray-200 dark:border-gray-700 pt-4">
						<p>
							<a href="Account/ForgotPassword"
								 class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 underline transition-colors">
								Forgot your password?
							</a>
						</p>
						<p>
							<a
								href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
								class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 underline transition-colors">
								Register as a new user
							</a>
						</p>
						<p>
							<a href="Account/ResendEmailConfirmation"
								 class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 underline transition-colors">
								Resend email confirmation
							</a>
						</p>
					</div>
				</EditForm>
			</div>
		</div>

		<div>
			<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 border border-gray-200 dark:border-gray-700">
				<h3 class="text-2xl font-semibold text-gray-900 dark:text-white mb-2">
					Use another service
				</h3>
				<p class="text-sm text-gray-600 dark:text-gray-400 mb-6">
					Sign in with an external authentication provider
				</p>
				<ExternalLoginPicker/>
			</div>
		</div>
	</div>
</div>

@code {

	private string? errorMessage;

	[CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm] private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		// This doesn't count login failures towards account lockout
		// To enable password failures to trigger account lockout, set lockoutOnFailure: true
		var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);

		if (result.Succeeded)
		{
			Logger.LogInformation("User logged in.");
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.RequiresTwoFactor)
		{
			RedirectManager.RedirectTo(
				"Account/LoginWith2fa",
				new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			errorMessage = "Error: Invalid login attempt.";
		}
	}

	private sealed class InputModel
	{

		[Required][EmailAddress] public string Email { get; set; } = "";

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[Display(Name = "Remember me?")] public bool RememberMe { get; set; }

	}

}