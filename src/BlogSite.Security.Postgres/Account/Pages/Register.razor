@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<PgBlogSiteUser> UserManager
@inject IUserStore<PgBlogSiteUser> UserStore
@inject SignInManager<PgBlogSiteUser> SignInManager
@inject IEmailSender<PgBlogSiteUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="max-w-6xl mx-auto py-8">
	<div class="mb-8">
		<h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2">
			Register
		</h1>
		<p class="text-gray-600 dark:text-gray-400">
			Create a new account to get started
		</p>
	</div>

	<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
		<div>
			<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 border border-gray-200 dark:border-gray-700">
				<StatusMessage Message="@Message"/>
				<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser"
									FormName="register">
					<DataAnnotationsValidator/>
					<h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-2">
						Create a new account
					</h2>
					<p class="text-sm text-gray-600 dark:text-gray-400 mb-6">
						Fill in your information to create your account
					</p>
					<ValidationSummary
						class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg p-4 mb-4"
						role="alert"/>

					<div class="mb-4">
						<label for="Input.DisplayName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Display Name
						</label>
						<InputText @bind-Value="Input.DisplayName"
											 id="Input.DisplayName"
											 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
										  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
										  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
										  placeholder-gray-400 dark:placeholder-gray-500
										  transition-all duration-200"
											 autocomplete="username"
											 aria-required="true"
											 placeholder="Your Name"/>
						<ValidationMessage For="() => Input.DisplayName" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
					</div>

					<div class="mb-4">
						<label for="Input.Email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Email
						</label>
						<InputText @bind-Value="Input.Email"
											 id="Input.Email"
											 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
										  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
										  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
										  placeholder-gray-400 dark:placeholder-gray-500
										  transition-all duration-200"
											 autocomplete="username"
											 aria-required="true"
											 placeholder="name@example.com"/>
						<ValidationMessage For="() => Input.Email" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
					</div>

					<div class="mb-4">
						<label for="Input.Password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Password
						</label>
						<InputText type="password"
											 @bind-Value="Input.Password"
											 id="Input.Password"
											 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
										  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
										  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
										  placeholder-gray-400 dark:placeholder-gray-500
										  transition-all duration-200"
											 autocomplete="new-password"
											 aria-required="true"
											 placeholder="••••••••"/>
						<ValidationMessage For="() => Input.Password" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
					</div>

					<div class="mb-6">
						<label for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Confirm Password
						</label>
						<InputText type="password"
											 @bind-Value="Input.ConfirmPassword"
											 id="Input.ConfirmPassword"
											 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
										  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
										  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
										  placeholder-gray-400 dark:placeholder-gray-500
										  transition-all duration-200"
											 autocomplete="new-password"
											 aria-required="true"
											 placeholder="••••••••"/>
						<ValidationMessage For="() => Input.ConfirmPassword" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
					</div>

					<button type="submit"
									class="w-full px-6 py-3 rounded-lg font-medium
								   bg-gradient-to-r from-indigo-600 to-purple-600 
								   hover:from-indigo-700 hover:to-purple-700
								   text-white
								   shadow-md hover:shadow-lg
								   transform hover:scale-[1.02] active:scale-[0.98]
								   transition-all duration-200">
						Register
					</button>
				</EditForm>
			</div>
		</div>

		<div>
			<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 border border-gray-200 dark:border-gray-700">
				<h3 class="text-2xl font-semibold text-gray-900 dark:text-white mb-2">
					Use another service
				</h3>
				<p class="text-sm text-gray-600 dark:text-gray-400 mb-6">
					Register with an external authentication provider
				</p>
				<ExternalLoginPicker/>
			</div>
		</div>
	</div>
</div>

@code {

	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm] private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	public async Task RegisterUser(EditContext editContext)
	{
		var user = CreateUser();
		user.DisplayName = Input.DisplayName;

		await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
		var emailStore = GetEmailStore();
		await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
		var result = await UserManager.CreateAsync(user, Input.Password);

		if (!result.Succeeded)
		{
			identityErrors = result.Errors;

			return;
		}

		Logger.LogInformation("User created a new account with password.");

		var userId = await UserManager.GetUserIdAsync(user);
		var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
		code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

		var callbackUrl = NavigationManager.GetUriWithQueryParameters(
			NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
			new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

		await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

		if (UserManager.Options.SignIn.RequireConfirmedAccount)
		{
			RedirectManager.RedirectTo(
				"Account/RegisterConfirmation",
				new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
		}

		await SignInManager.SignInAsync(user, false);
		RedirectManager.RedirectTo(ReturnUrl);
	}

	private PgBlogSiteUser CreateUser()
	{
		try
		{
			return Activator.CreateInstance<PgBlogSiteUser>();
		}
		catch
		{
			throw new InvalidOperationException($"Can't create an instance of '{nameof(PgBlogSiteUser)}'. " +
																					$"Ensure that '{nameof(PgBlogSiteUser)}' is not an abstract class and has a parameterless constructor.");
		}
	}

	private IUserEmailStore<PgBlogSiteUser> GetEmailStore()
	{
		if (!UserManager.SupportsUserEmail)
		{
			throw new NotSupportedException("The default UI requires a user store with email support.");
		}

		return (IUserEmailStore<PgBlogSiteUser>)UserStore;
	}

	private sealed class InputModel
	{

		[Required]
		[Display(Name = "Display Name")]
		public string DisplayName { get; set; } = "";


		[Required]
		[EmailAddress]
		[Display(Name = "Email")]
		public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "Password")]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

	}

}