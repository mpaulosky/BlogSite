@page "/Account/Manage"
@using System.ComponentModel.DataAnnotations

@inject UserManager<PgBlogSiteUser> UserManager
@inject SignInManager<PgBlogSiteUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4" aria-label="Manage Profile">Profile</h3>
<StatusMessage/>

<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
	<DataAnnotationsValidator/>
	<ValidationSummary
		class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg p-4 mb-4"
		role="alert"/>

	<div class="mb-4">
		<label for="username" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
			Username
		</label>
		<input type="text" value="@username" id="username" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
					  bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400
					  cursor-not-allowed
					  transition-all duration-200" placeholder="Choose your username." disabled/>
	</div>

	<div class="mb-4">
		<label for="Input.DisplayName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
			Display Name
		</label>
		<InputText @bind-Value="Input.DisplayName" id="Input.DisplayName" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
						  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
						  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
						  placeholder-gray-400 dark:placeholder-gray-500
						  transition-all duration-200" placeholder="Enter your display name"/>
		<ValidationMessage For="() => Input.DisplayName" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
	</div>

	<div class="mb-6">
		<label for="Input.PhoneNumber" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
			Phone number
		</label>
		<InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
						  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
						  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
						  placeholder-gray-400 dark:placeholder-gray-500
						  transition-all duration-200" placeholder="Enter your phone number"/>
		<ValidationMessage For="() => Input.PhoneNumber" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
	</div>

	<button type="submit" class="w-full px-6 py-3 rounded-lg font-medium
				   bg-gradient-to-r from-indigo-600 to-purple-600 
				   hover:from-indigo-700 hover:to-purple-700
				   text-white
				   shadow-md hover:shadow-lg
				   transform hover:scale-[1.02] active:scale-[0.98]
				   transition-all duration-200">
		Save
	</button>
</EditForm>

@code {

	private PgBlogSiteUser user = default!;

	private string? username;

	private string? phoneNumber;

	[CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

	[ Parameter][ SupplyParameterFromForm(FormName = "profile")]
	public InputModel Input { get; set; } = new() { DisplayName = "" };

	protected override async Task OnInitializedAsync()
	{
		user = await UserAccessor.GetRequiredUserAsync(HttpContext);
		username = user.UserName; //await UserManager.GetUserNameAsync(user);
		phoneNumber = user.PhoneNumber; // await UserManager.GetPhoneNumberAsync(user);

		// Input.DisplayName = user.DisplayName;

		if (string.IsNullOrEmpty(Input.PhoneNumber))
		{
			Input.DisplayName = user.DisplayName;
			Input.PhoneNumber = phoneNumber;
		}

	}

	private async Task OnValidSubmitAsync()
	{
		if (Input.PhoneNumber != phoneNumber)
		{
			var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);

			if (!setPhoneResult.Succeeded)
			{
				RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
			}
		}

		var thisUser = await UserManager.FindByIdAsync(user.Id);
		thisUser!.DisplayName = Input.DisplayName!;
		thisUser.PhoneNumber = Input.PhoneNumber;
		var updateResult = await UserManager.UpdateAsync(thisUser);

		await SignInManager.RefreshSignInAsync(user);
		RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
	}

	public sealed class InputModel
	{

		[Phone]
		[Display(Name = "Phone number")]
		public string? PhoneNumber { get; set; }


		[ Display(Name = "Display Name")][ Required][ MaxLength(50)]
		public string? DisplayName { get; set; }

	}

}