@page "/Account/Manage/ChangePassword"
@using System.ComponentModel.DataAnnotations

@inject UserManager<PgBlogSiteUser> UserManager
@inject SignInManager<PgBlogSiteUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Change password</h3>
<StatusMessage Message="@message"/>

<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
	<DataAnnotationsValidator/>
	<ValidationSummary
		class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg p-4 mb-4"
		role="alert"/>

	<div class="mb-4">
		<label for="Input.OldPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Old
			password</label>
		<InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                          focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                          placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200"
							 autocomplete="current-password" aria-required="true" placeholder="••••••••"/>
		<ValidationMessage For="() => Input.OldPassword" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
	</div>

	<div class="mb-4">
		<label for="Input.NewPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">New
			password</label>
		<InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                          focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                          placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200"
							 autocomplete="new-password" aria-required="true" placeholder="••••••••"/>
		<ValidationMessage For="() => Input.NewPassword" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
	</div>

	<div class="mb-6">
		<label for="Input.ConfirmPassword"
					 class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Confirm password</label>
		<InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                          bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                          focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                          placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200"
							 autocomplete="new-password" aria-required="true" placeholder="••••••••"/>
		<ValidationMessage For="() => Input.ConfirmPassword" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
	</div>

	<button type="submit" class="w-full px-6 py-3 rounded-lg font-medium
                   bg-gradient-to-r from-indigo-600 to-purple-600 
                   hover:from-indigo-700 hover:to-purple-700
                   text-white shadow-md hover:shadow-lg
                   transform hover:scale-[1.02] active:scale-[0.98]
                   transition-all duration-200">
		Update password
	</button>
</EditForm>

@code {

	private string? message;

	private PgBlogSiteUser user = default!;

	private bool hasPassword;

	[CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm] private InputModel Input { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		user = await UserAccessor.GetRequiredUserAsync(HttpContext);
		hasPassword = await UserManager.HasPasswordAsync(user);

		if (!hasPassword)
		{
			RedirectManager.RedirectTo("Account/Manage/SetPassword");
		}
	}

	private async Task OnValidSubmitAsync()
	{
		var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);

		if (!changePasswordResult.Succeeded)
		{
			message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";

			return;
		}

		await SignInManager.RefreshSignInAsync(user);
		Logger.LogInformation("User changed their password successfully.");

		RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
	}

	private sealed class InputModel
	{

		[Required]
		[DataType(DataType.Password)]
		[Display(Name = "Current password")]
		public string OldPassword { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		[Display(Name = "New password")]
		public string NewPassword { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm new password")]
		[Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

	}

}