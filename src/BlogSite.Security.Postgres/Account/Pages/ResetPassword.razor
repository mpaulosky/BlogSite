@page "/Account/ResetPassword"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.WebUtilities


@inject IdentityRedirectManager RedirectManager
@inject UserManager<PgBlogSiteUser> UserManager

<PageTitle>Reset password</PageTitle>

<div class="max-w-md mx-auto py-8">
	<h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Reset password</h1>
	<p class="text-gray-600 dark:text-gray-400 mb-6">Enter your new password below</p>

	<div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 border border-gray-200 dark:border-gray-700">
		<StatusMessage Message="@Message"/>
		<EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator/>
			<ValidationSummary
				class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg p-4 mb-4"
				role="alert"/>

			<input type="hidden" name="Input.Code" value="@Input.Code"/>

			<div class="mb-4">
				<label for="Input.Email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</label>
				<InputText @bind-Value="Input.Email" id="Input.Email"
									 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                                  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                                  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                                  placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200"
									 autocomplete="username" aria-required="true" placeholder="name@example.com"/>
				<ValidationMessage For="() => Input.Email" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
			</div>

			<div class="mb-4">
				<label for="Input.Password"
							 class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Password</label>
				<InputText type="password" @bind-Value="Input.Password" id="Input.Password"
									 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                                  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                                  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                                  placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200"
									 autocomplete="new-password" aria-required="true" placeholder="••••••••"/>
				<ValidationMessage For="() => Input.Password" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
			</div>

			<div class="mb-6">
				<label for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Confirm
					password</label>
				<InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword"
									 class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 
                                  bg-white dark:bg-gray-700 text-gray-900 dark:text-white
                                  focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 focus:border-transparent
                                  placeholder-gray-400 dark:placeholder-gray-500 transition-all duration-200"
									 autocomplete="new-password" aria-required="true" placeholder="••••••••"/>
				<ValidationMessage For="() => Input.ConfirmPassword" class="text-red-600 dark:text-red-400 text-sm mt-1"/>
			</div>

			<button type="submit"
							class="w-full px-6 py-3 rounded-lg font-medium
                           bg-gradient-to-r from-indigo-600 to-purple-600 
                           hover:from-indigo-700 hover:to-purple-700
                           text-white shadow-md hover:shadow-lg
                           transform hover:scale-[1.02] active:scale-[0.98]
                           transition-all duration-200">
				Reset
			</button>
		</EditForm>
	</div>
</div>

@code {

	private IEnumerable<IdentityError>? identityErrors;

	[SupplyParameterFromForm] private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery] private string? Code { get; set; }

	private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

	protected override void OnInitialized()
	{
		if (Code is null)
		{
			RedirectManager.RedirectTo("Account/InvalidPasswordReset");
		}

		Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
	}

	private async Task OnValidSubmitAsync()
	{
		var user = await UserManager.FindByEmailAsync(Input.Email);

		if (user is null)
		{
			// Don't reveal that the user does not exist
			RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
		}

		var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);

		if (result.Succeeded)
		{
			RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
		}

		identityErrors = result.Errors;
	}

	private sealed class InputModel
	{

		[Required][EmailAddress] public string Email { get; set; } = "";

		[Required]
		[StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password")]
		[Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
		public string ConfirmPassword { get; set; } = "";

		[Required] public string Code { get; set; } = "";

	}

}